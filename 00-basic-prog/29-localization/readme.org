* Локализация и разные готовые решения
** сразу используем Boost без него нереально сделать что-то профессиональное на с++ для локализации
** учим как создать нужную локаль и через нее работать с датами, сортировками, числами
** TODO профессиональная локализация строк, пример через Boost и GNU GetText http://www.gnu.org/software/gettext/manual/gettext.html
** TODO Internalization (or I18n)
** TODO Localization (or L10n)
** TODO .po files mean Portable Files - for humans to read-edit
*** single .po file for single target language
*** package consist of several languages each in separeted .po file
*** .po files created with ~xgettext~ program
*** .po files updated with ~msgmerge~ program
*** .pot files is base template in .po format
** TODO .mo files mean Mashine Files - for programs and in binary format
*** .mo files is often different from system to system, and non-portable
*** .gmo are really MO files, when it is known that these files use the GNU format.
** Schema of i18n with gnu gettext
=
Original C Sources ───> Preparation ───> Marked C Sources ───╮
                                                             │
              ╭─────────<─── GNU gettext Library             │
╭─── make <───┤                                              │
│             ╰─────────<────────────────────┬───────────────╯
│                                            │
│   ╭─────<─── PACKAGE.pot <─── xgettext <───╯   ╭───<─── PO Compendium
│   │                                            │              ↑
│   │                                            ╰───╮          │
│   ╰───╮                                            ├───> PO editor ───╮
│       ├────> msgmerge ──────> LANG.po ────>────────╯                  │
│   ╭───╯                                                               │
│   │                                                                   │
│   ╰─────────────<───────────────╮                                     │
│                                 ├─── New LANG.po <────────────────────╯
│   ╭─── LANG.gmo <─── msgfmt <───╯
│   │
│   ╰───> install ───> /.../LANG/PACKAGE.mo ───╮
│                                              ├───> "Hello world!"
╰───────> install ───> /.../bin/PROGRAM ───────╯
=
** add to your main header file
#+begin_src C++
#define _(String) (String)
#define N_(String) String
#define textdomain(Domain)
#define bindtextdomain(Package, Directory)
#+end_src
** later replace previous definitions with:
#+begin_src C++
#include <libintl.h>
#define _(String) gettext (String)
#define gettext_noop(String) String
#define N_(String) gettext_noop (String)
#+end_src
** and link with =libintl.a= or =libintl.so= (on Linux it is already linked with glibc)
* Locale Names Environment variable
** Format ll_CC where
1. ll two letter (or three letter) ISO-639 (https://www.iso.org/iso-639-language-code
   https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes
   https://www.gnu.org/software/gettext/manual/gettext.html#Language-Codes
   https://www.gnu.org/software/gettext/manual/gettext.html#Country-Codes)
2. CC tow letter of country or territory
3. example de_DE (German Germany)
4. extended ll_CC.encoding or ll_CC.variant
5. same stable locale on modern Unix is "C.UTF-8" or simple "C"
** Environment varibals
1. LANGUAGE - list of priorities languages example: zh_HK:zh_TW
2. LC_ALL - override all LC_xxx3. LC_xxx (LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY, LC_MESSAGES)
   override LANG
4. LANG - example ru_RU.UTF-8 (you should use it by default)
** Windows console
1. set OUTPUT_CHARSET=CP850 influence only on message catalogs
2. table of windows common ANSI and OEM code pages:
| territory                 | ANSI encoding | OEM encoding |
|---------------------------+---------------+--------------|
| Western Europe            | CP1252        | CP850        |
| Slavic countries(Latin 2) | CP1250        | CP852        |
| Baltic countries          | CP1257        | CP775        |
| Russia                    | CP1251        | CP866        |
3. I personaly prefer in modern Windows 10/11 set utf-8 as default Terminal encoding
4. To verify utf-8 is enabled:
#+begin_src cmd
chcpActive code page: 65001
#+end_src
** The format of PO files
1. from documentation:
#+begin_src PO
white-space
#  translator-comments
#. extracted-comments
#: reference…
#, flag…
#| msgid previous-untranslated-string
msgid untranslated-string
msgstr translated-string
#+end_src
2. minimal example:
#+begin_src PO
#: lib/error.c:116
msgid "Unknown system error"
msgstr "Error desconegut del sistema"
#+end_src
3. flag format for `#,`: *c-format* *c++-format* from =xgettext= program
4. also note about `context` to disambiguate messages with the same untranslated-string
5. plural forms:
#+begin_src .po
white-space
#  translator-comments
#. extracted-comments
#: reference…
#, flag…
#| msgid previous-untranslated-string-singular
#| msgid_plural previous-untranslated-string-plural
msgid untranslated-string-singular
msgid_plural untranslated-string-plural
msgstr[0] translated-string-case-0
...
msgstr[N] translated-string-case-n
#+end_src
example:
#+begin_src .po
#: src/msgcmp.c:338 src/po-lex.c:699
#, c-format
msgid "found %d fatal error"
msgid_plural "found %d fatal errors"
msgstr[0] "s'ha trobat %d error fatal"
msgstr[1] "s'han trobat %d errors fatals"
#+end_src
6. multi-line string how to:
#+begin_src .po
msgid ""
"Here is an example of how one might continue a very long string\n"
"for the common case the string represents multi-line output.\n"
#+end_src
** Preparing Program Sources
1. for C sources: `#include <libintl.h>`
2. initialization for C program:
#+begin_src C
int main(int argc, char* argv[])
{
  // ...
  setlocale(LC_ALL, "");
  bindtextdomain(PACKAGE, LOCALEDIR);
  textdomain(PACKAGE);
  // ...
}
#+end_src

** generating po files
1. generate messages.pot file from source =main.cxx=
2. copy =messages.pot= to PACKAGE-VERSION/po/messages.pot
3. in terminal call =msginit= in directory PACKAGE-VERSION/po/messages.pot
4. in my default ru_BY.UTF-8 locale generated one file ru.po with correct
   =nplural= form detection for Russian lang
5. to generate English lang call =msginit -i messages.pot -o en.po -l en_US=
6. you should find en.po file with correct english nplural form detection
